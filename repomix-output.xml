This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
backend/
  Hijacking_cold_cases/
    api/
      migrations/
        0001_initial.py
      admin.py
      apps.py
      models.py
      serializers.py
      tests.py
      urls.py
      views.py
    Hijacking_cold_cases/
      asgi.py
      settings.py
      urls.py
      wsgi.py
    manage.py
  requirements.txt
frontend/
  Hijacking_Cold_Cases/
    public/
      vite.svg
    src/
      api/
        axiosInstance.js
      assets/
        react.svg
      components/
        EvidenceCard.jsx
        Navbar.jsx
        PrivateRoute.jsx
        SuspectCard.jsx
        VictimCard.jsx
      pages/
        CaseInvestigation.jsx
        CasePage.jsx
        LandingPage.jsx
        Login.jsx
        Profile.jsx
        Signup.jsx
      App.css
      App.jsx
      index.css
      main.jsx
    eslint.config.js
    index.html
    package.json
    README.md
    vite.config.js
.gitignore
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="frontend/Hijacking_Cold_Cases/src/components/EvidenceCard.jsx">
// src/components/EvidenceCard.jsx
import React, { useState } from "react";

export default function EvidenceCard({ evidence }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="rounded-2xl shadow-md p-4 bg-white dark:bg-gray-800">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="bg-gray-900 text-white py-2 px-4 rounded hover:bg-gray-700 transition"
      >
        {isOpen ? "Close File" : "Open File"}
      </button>

      {isOpen && (
        <div className="mt-4 space-y-4 max-h-96 overflow-y-auto border-t pt-4">
          {evidence.map((item, index) => (
            <div
              key={index}
              className="bg-gray-100 dark:bg-gray-700 p-3 rounded shadow-inner"
            >
              <p className="text-gray-900 dark:text-gray-100">
                {item.text}
              </p>
              <p className="text-sm text-gray-500 mt-1">
                <strong>Type:</strong> {item.type}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="backend/Hijacking_cold_cases/api/migrations/0001_initial.py">
# Generated by Django 5.2 on 2025-04-24 14:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(max_length=15)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('cell', models.CharField(max_length=30)),
                ('picture', models.URLField()),
                ('thumbnail_picture', models.URLField()),
                ('nationality', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('summary', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('solved', 'Solved'), ('cold', 'Cold')], default='cold', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='easy', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('killer', models.CharField(blank=True, max_length=255)),
                ('justification', models.TextField(blank=True)),
                ('alibis', models.JSONField(blank=True, default=dict)),
                ('crime_scene_description', models.TextField(blank=True, null=True)),
                ('victim_name', models.CharField(blank=True, max_length=255, null=True)),
                ('victim_occupation', models.CharField(blank=True, max_length=255, null=True)),
                ('cause_of_death', models.CharField(blank=True, max_length=255, null=True)),
                ('last_known_location', models.CharField(blank=True, max_length=255, null=True)),
                ('background_story', models.TextField(blank=True, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Clue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('text', models.TextField()),
                ('is_red_herring', models.BooleanField(default=False)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clues', to='api.case')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clues', to='api.person')),
            ],
        ),
        migrations.CreateModel(
            name='CaseInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('lives_remaining', models.IntegerField(default=3)),
                ('status', models.CharField(default='active', max_length=20)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'case')},
            },
        ),
    ]
</file>

<file path="backend/Hijacking_cold_cases/api/apps.py">
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'
</file>

<file path="backend/Hijacking_cold_cases/api/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="backend/Hijacking_cold_cases/Hijacking_cold_cases/asgi.py">
"""
ASGI config for Hijacking_cold_cases project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Hijacking_cold_cases.settings')

application = get_asgi_application()
</file>

<file path="backend/Hijacking_cold_cases/Hijacking_cold_cases/wsgi.py">
"""
WSGI config for Hijacking_cold_cases project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Hijacking_cold_cases.settings')

application = get_wsgi_application()
</file>

<file path="backend/Hijacking_cold_cases/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Hijacking_cold_cases.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="backend/requirements.txt">
anyio==4.8.0
argon2-cffi==23.1.0
argon2-cffi-bindings==21.2.0
arrow==1.3.0
asgiref==3.8.1
asttokens==3.0.0
async-lru==2.0.4
attrs==25.1.0
babel==2.17.0
beautifulsoup4==4.13.3
bleach==6.2.0
blinker==1.9.0
certifi==2024.2.2
cffi==1.17.1
charset-normalizer==3.3.2
click==8.1.8
comm==0.2.2
debugpy==1.8.12
decorator==5.1.1
defusedxml==0.7.1
Django==5.0.3
djangorestframework==3.15.1
executing==2.2.0
fastjsonschema==2.21.1
filelock==3.17.0
Flask==3.1.0
fqdn==1.5.1
fsspec==2025.2.0
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
idna==3.6
iniconfig==2.0.0
ipykernel==6.29.5
ipython==8.32.0
ipywidgets==8.1.5
isoduration==20.11.0
itsdangerous==2.2.0
jedi==0.19.2
Jinja2==3.1.5
joblib==1.4.2
json5==0.10.0
jsonpointer==3.0.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
jupyter==1.1.1
jupyter-console==6.6.3
jupyter-events==0.12.0
jupyter-lsp==2.2.5
jupyter_client==8.6.3
jupyter_core==5.7.2
jupyter_server==2.15.0
jupyter_server_terminals==0.5.3
jupyterlab==4.3.5
jupyterlab_pygments==0.3.0
jupyterlab_server==2.27.3
jupyterlab_widgets==3.0.13
lightning-utilities==0.12.0
MarkupSafe==3.0.2
matplotlib-inline==0.1.7
mistune==3.1.1
mpmath==1.3.0
nbclient==0.10.2
nbconvert==7.16.6
nbformat==5.10.4
nest-asyncio==1.6.0
networkx==3.4.2
notebook==7.3.2
notebook_shim==0.2.4
numpy==2.2.3
nvidia-cublas-cu12==12.4.5.8
nvidia-cuda-cupti-cu12==12.4.127
nvidia-cuda-nvrtc-cu12==12.4.127
nvidia-cuda-runtime-cu12==12.4.127
nvidia-cudnn-cu12==9.1.0.70
nvidia-cufft-cu12==11.2.1.3
nvidia-curand-cu12==10.3.5.147
nvidia-cusolver-cu12==11.6.1.9
nvidia-cusparse-cu12==12.3.1.170
nvidia-cusparselt-cu12==0.6.2
nvidia-nccl-cu12==2.21.5
nvidia-nvjitlink-cu12==12.4.127
nvidia-nvtx-cu12==12.4.127
oauthlib==3.2.2
overrides==7.7.0
packaging==24.2
pandas==2.2.3
pandocfilters==1.5.1
parso==0.8.4
pexpect==4.9.0
pillow==11.1.0
platformdirs==4.3.6
pluggy==1.5.0
prometheus_client==0.21.1
prompt_toolkit==3.0.50
psutil==6.1.1
psycopg==3.2.6
psycopg-binary==3.2.6
ptyprocess==0.7.0
pure_eval==0.2.3
pycparser==2.22
Pygments==2.19.1
pytest==7.3.1
pytest-mock==3.10.0
pytest-print==0.3.1
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
python-json-logger==3.2.1
pytz==2025.1
PyYAML==6.0.2
pyzmq==26.2.1
referencing==0.36.2
requests==2.31.0
requests-oauthlib==2.0.0
rfc3339-validator==0.1.4
rfc3986-validator==0.1.1
rpds-py==0.22.3
scikit-learn==1.6.1
scipy==1.15.2
Send2Trash==1.8.3
setuptools==75.8.0
six==1.17.0
sniffio==1.3.1
soupsieve==2.6
sqlparse==0.4.4
stack-data==0.6.3
sympy==1.13.1
terminado==0.18.1
threadpoolctl==3.5.0
tinycss2==1.4.0
torch==2.6.0
torchaudio==2.6.0
torchmetrics==1.6.1
torchvision==0.21.0
tornado==6.4.2
traitlets==5.14.3
triton==3.2.0
types-python-dateutil==2.9.0.20241206
typing_extensions==4.10.0
tzdata==2025.1
uri-template==1.3.0
urllib3==2.2.1
wcwidth==0.2.13
webcolors==24.11.1
webencodings==0.5.1
websocket-client==1.8.0
Werkzeug==3.1.3
widgetsnbextension==4.0.13
</file>

<file path="frontend/Hijacking_Cold_Cases/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="frontend/Hijacking_Cold_Cases/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="frontend/Hijacking_Cold_Cases/src/components/SuspectCard.jsx">
import React, { useState } from "react";

export default function SuspectCard({ name, alibi, clues = [], photoUrl }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="bg-white p-4 rounded shadow hover:shadow-lg transition duration-200">
      <h3 className="font-bold text-lg">{name}</h3>

      <button
        onClick={() => setIsOpen(!isOpen)}
        className="mt-2 px-4 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm"
      >
        {isOpen ? "Close File" : "Open File"}
      </button>

      {isOpen && (
        <div className="mt-4 space-y-2">
          {photoUrl && (
            <img
              src={photoUrl}
              alt={`${name}'s profile`}
              className="w-24 h-24 object-cover rounded-full mx-auto mb-2"
            />
          )}

          {alibi && (
            <p className="text-sm">
              <strong>Alibi:</strong> {alibi.where}, {alibi.what}, Witnesses: {alibi.witnesses}
            </p>
          )}

          <div className="mt-2">
            <strong>Clues:</strong>
            {clues.length > 0 ? (
              <ul className="list-disc list-inside text-sm mt-1">
                {clues.map((clue, index) => (
                  <li key={index}>{clue.text}</li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-gray-500">No Clue Assigned</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/components/VictimCard.jsx">
import React, { useState } from "react";


export default function VictimCard({ victim, occupation, causeOfDeath, lastKnownLocation, backgroundStory }) {
    const [isOpen, setIsOpen] = useState(false);
  
    return (
      <div className="mb-6">
        <h2 className="text-xl font-semibold">Victim:</h2>
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="px-4 py-2 bg-gray-200 rounded mb-2"
        >
          {isOpen ? "Close File" : "Open File"}
        </button>
  
        {isOpen && (
          <div className="bg-white p-4 border rounded shadow">
            <p><strong>Name:</strong> {victim || "Unknown"}</p>
            <p><strong>Occupation:</strong> {occupation || "Unknown"}</p>
            <p><strong>Cause of Death:</strong> {causeOfDeath || "Unknown"}</p>
            <p><strong>Last Known Location:</strong> {lastKnownLocation || "Unknown"}</p>
            <p><strong>Background Story:</strong> {backgroundStory || "None available."}</p>
          </div>
        )}
      </div>
    );
  }
</file>

<file path="frontend/Hijacking_Cold_Cases/src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)
</file>

<file path="frontend/Hijacking_Cold_Cases/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path=".gitignore">
#enviroment
.env

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


# Python
__pycache__/
*.pyc
*.pyo
*.pyd
*.sqlite3
*.log
*.pot

# Django
db.sqlite3


# Node
node_modules/


# React
build/
dist/

# VSCode
.vscode/

# OS
.DS_Store
Thumbs.db
</file>

<file path="backend/Hijacking_cold_cases/api/admin.py">
from django.contrib import admin

# Register your models here.
from .models import Case, CaseInstance
from django.contrib.auth import get_user_model

User= get_user_model()

admin.site.register(Case)
admin.site.register(CaseInstance)
admin.site.register(User)
</file>

<file path="frontend/Hijacking_Cold_Cases/src/api/axiosInstance.js">
// src/api/axiosInstance.js
import axios from "axios";

const instance = axios.create({
  baseURL: "http://localhost:8000/api/",
  withCredentials: true, // if you're using cookies/token auth
});


// Automatically add token to every request if available
instance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("accessToken");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default instance;
</file>

<file path="frontend/Hijacking_Cold_Cases/src/components/PrivateRoute.jsx">
import { Navigate } from "react-router-dom";

export default function PrivateRoute({children}) {
    const accessToken = localStorage.getItem('accessToken');

    //if no token exist, redirect to login
    if(!accessToken) {
        return <Navigate to="/login" replace />
    }

    //if token exist allow access
    return children;
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/LandingPage.jsx">
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import axios from "../api/axiosInstance";

export default function LandingPage() {
  const [activeCase, setActiveCase] = useState(null);

  useEffect(() => {
    const fetchActiveCase = async () => {
      try {
        const res = await axios.get("/active-case/");
        if (res.data.active) {
          setActiveCase(res.data);
        }
      } catch (err) {
        console.error("Failed to fetch active case:", err);
      }
    };

    fetchActiveCase();
  }, []);

  return (
    <div className="p-6 text-center">
      <h1 className="text-4xl font-bold mb-2">Welcome, Detective.</h1>
      <p className="text-gray-600 mb-6">Choose a cold case or check your files.</p>

      <div className="flex flex-col gap-4 items-center">
        {activeCase ? (
          <Link
            to={`/case/${activeCase.case_id}`}
            className="text-white bg-indigo-600 hover:bg-indigo-700 px-6 py-2 rounded shadow"
          >
             Resume Case: {activeCase.case_title}
          </Link>
        ) : (
          <Link
            to="/cases"
            className="text-white bg-green-600 hover:bg-green-700 px-6 py-2 rounded shadow"
          >
             Start New Case
          </Link>
        )}

        <Link
          to="/cases"
          className="text-blue-600 underline"
        >
           View All Case Files
        </Link>

        <Link
          to="/profile"
          className="text-blue-600 underline"
        >
           Your Profile
        </Link>
      </div>
    </div>
  );
}
</file>

<file path="frontend/Hijacking_Cold_Cases/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hijacking Cold Cases</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="frontend/Hijacking_Cold_Cases/package.json">
{
  "name": "hijacking-cold-cases",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.5.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="frontend/Hijacking_Cold_Cases/README.md">
# Whodunit 

Whodunit is an interactive mystery-solving game where players take on the role of a digital detective solving cold cases. Built with Django and React, the app simulates digging through case files, opening drawers, and collecting clues on a virtual detective's desk.

##  Tech Stack

- React (Vite)
- Django REST Framework
- PostgreSQL
- React Router (planned)
- JWT authentication (planned)

##  Features

- User Sign-Up & Login
- Dynamic difficulty levels
- Randomized cold case generation (planned)
- Limited attempts ("lives") per case
- Detective-themed UI with drawers, sticky notes, and file folders

##  Current Status

-  Frontend: Sign-Up and Login components complete
- Backend: Not started yet
-  Next Step: Implement routing with React Router

##  File Structure (Planned)


##  Setup Instructions

Coming soon — once backend and database are in place.

##  Future Plans

- Full CRUD for cases and clues
- Timer-based cases
- Frontend animations for UI immersion
- Clue tracking system with sticky notes

---

 **This project is being developed one step at a time to keep structure and clarity.**
</file>

<file path="frontend/Hijacking_Cold_Cases/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/

export default defineConfig({
  server: {
    proxy: {
      "/api": "http://localhost:8000",
    },
  },
});
</file>

<file path="backend/Hijacking_cold_cases/Hijacking_cold_cases/urls.py">
"""
URL configuration for Hijacking_cold_cases project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),  # All app-specific routes are included here
]
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/Profile.jsx">
import { useEffect, useState } from "react";
import axios from "axios";
import React from "react";

export default function Profile() {
    const [profile,setProfile]= useState(null);
    const[error, setError] = useState('');

    useEffect(() => {
        const fetchProfile = async () => {
            try {
                const token = localStorage.getItem('accessToken');
                const response = await axios.get('http://127.0.0.1:8000/api/profile/', {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });
                setProfile(response.data);
            } catch (err) {
                console.error('Profile fetch error:', err);
                setError('Failed to load profile');
            }
        };

        fetchProfile();
    }, []);
    
    
    return (
        <div>
            <h1>Profile Page</h1>
            {error && <p>{error}</p>}
            {profile ? (
                <div>
                    <p>Username: {profile.username}</p>
                    <p>Email: {profile.email}</p>
                </div>
            ) : (
                <p>Loading profile...</p>
            )}
        </div>
    );
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/Signup.jsx">
import { useState } from 'react'
import {Link} from 'react-router-dom'
import React from 'react'

// define signup function
export default function Signup() {
    // hold the form input values with useState
    const [formData, setFormData] = useState({
        username: '',
        email: '',
        password: '',
        detectiveName: ''
    })
    //handle submission of form
    const handleSubmit = (e) => {
        e.preventDefault()//prevent page reload on form submit
        console.log('Form submitted:', formData)
    }
    //handle changes to the form fields 
    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
     })
    }




    return (
    <>
    <h1>Signup Page</h1>
        <h2>Create An account</h2>
        <form onSubmit={handleSubmit}>
            <label>Username:</label>
            <input 
            type="text" 
            name="username"
            value={formData.username}
            onChange={handleChange}
            />


            <label>Email:</label>
            <input 
            type="email" 
            name="email"
            value={formData.email}
            onChange={handleChange}
            />

            <label>Password:</label>
            <input 
            type="password" 
            name="password"
            value={formData.password}
            onChange={handleChange}
            />

            <label>Detective Name:</label>
            <input 
            type="text" 
            name="detectiveName"
            value={formData.detectiveName}
            onChange={handleChange}
            />

            <button type="submit">Sign Up</button>
            <p>Already have an account? <Link to="/login">Log in here</Link></p>

        </form>
        
    </>
    )

}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/Login.jsx">
import { useState } from "react"
import {Link, useNavigate} from 'react-router-dom'
import axios from 'axios'
import React from "react";


// login component recieves "onLogin" Prop 
export default function Login({onLogin}) {
    const navigate = useNavigate();

    // hold the form imput values with useState
    const [formData, setFormData] = useState({
        username: '',
        password: '',
    });
    //hold login error
    const [error, setError] = useState(' ');

    // handle changes to the form fields
    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
     })
    }
    // handle form submissions 
    const handleSubmit= async (e) => {
        e.preventDefault(); //prevents page from reloading on form submit
        console.log("Login form submitted"); 
        setError(''); // clears existing errors

        // login if both fields are filled
        if (!formData.username || !formData.password) {
            setError('Please enter both username and password.');
            return;
        }
        try {
            // send post request to django backend
            const response = await axios.post('http://127.0.0.1:8000/api/token/', formData);


            //destructure access and refresh tokens from response
            const {access, refresh} = response.data;

            // store tokens locally
            localStorage.setItem('accessToken', access);
            localStorage.setItem('refreshToken', refresh);
        
            // call the "onLogin" function passed as a prop
            onLogin?.(formData.username);
            // Redirect to profile
            navigate('/home');
            } catch (err) {
            //show an error if any field is missing
            console.error('Login error', err)
            setError('Invalid username or password');
        }

    };

    return ( 
    <div>
        <h1>Login Page</h1>
        <form onSubmit={handleSubmit}>
            <div>
                <label>Username:</label>
                <input
                    name="username"
                    type= "text"
                    value={formData.username}
                    onChange={handleChange}
                />
            </div>
            <div>
                <label>Password:</label>
                <input
                    name="password"
                    type= "password"
                    value={formData.password}
                    onChange={handleChange}
                />
            </div>
            {error && <p>{error}</p>}
            <button type="submit">Log In</button>
            <p>Don't have an account? <Link to="/signup">Sign up here</Link></p>


        </form>
    </div>



    )
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/components/Navbar.jsx">
import {Link, useNavigate} from 'react-router-dom'
import React from 'react';
export default function Navbar() {
    const navigate = useNavigate();
    const isLoggedIn = !!localStorage.getItem('accessToken');

    const handleLogout = () => {
        console.log("Logging out...");
        //clear tokens
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');

        //navigate to login page after logout
        navigate('/login');
    };
    
    return(
        <nav>
            <ul>
                {!isLoggedIn && (
                <>
                    <li><Link to="/signup">Sign Up</Link></li>
                    <li><Link to="/login">Login</Link></li>                    
                </>
                )}
                {isLoggedIn && (
                <>    
                    <li><Link to="/home">Home</Link></li>
                    <li><Link to="/profile">Profile</Link></li>
                    <li><button onClick={handleLogout}>Logout</button></li>
                </>
                )}
            </ul>
        </nav>
    )
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/CaseInvestigation.jsx">
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import axios from "../api/axiosInstance";
import React from "react";
import VictimCard from "../components/VictimCard";
import SuspectCard from "../components/SuspectCard";
import EvidenceCard from "../components/EvidenceCard";

export default function CaseInvestigation() {
  const { id: caseId } = useParams();
  const [caseData, setCaseData] = useState(null);
  const [people, setPeople] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [caseRes, peopleRes] = await Promise.all([
          axios.get(`/cases/${caseId}/`),
          axios.get("/people/"),
        ]);
        console.log("Fetched case response data:", caseRes.data);
        window.caseData = caseRes.data;
        setCaseData(caseRes.data);
        setPeople(peopleRes.data);
      } catch (err) {
        console.error("Error loading case or people:", err);
      }
    };

    fetchData();
  }, [caseId]);

  if (!caseData) return <p>Loading case...</p>;

  const normalize = (str) =>
    str?.normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim().toLowerCase();

  return (
    <div className="p-6">
      {/* Case Title */}
      <h1 className="text-2xl font-bold">{caseData.title}</h1>

      {/* Case Summary */}
      <p className="italic text-gray-600 mb-4">{caseData.summary}</p>

      {/* Victim Card */}
      <VictimCard
        victim={caseData.victim_name}
        occupation={caseData.victim_occupation}
        causeOfDeath={caseData.cause_of_death}
        lastKnownLocation={caseData.last_known_location}
        backgroundStory={caseData.background_story}
      />

      {/* Character Alibis & Clues */}
      <h2 className="text-xl font-semibold mt-6">Character Files</h2>
      <div className="grid gap-4 mt-2 sm:grid-cols-2 md:grid-cols-3">
      
      {caseData.characters?.map((suspect) => {
       const person = people.find(
          (p) => `${p.first_name} ${p.last_name}`.toLowerCase() === suspect.name.toLowerCase()
        );

        const characterClues = (caseData.clues || []).filter(
          (clue) =>
            clue.character &&
            `${clue.character.first_name} ${clue.character.last_name}`.toLowerCase() === suspect.name.toLowerCase()
        );

        return (
        <SuspectCard
          key={suspect.name}
          name={suspect.name}
          alibi={suspect.alibi}
          clues={characterClues}
          photoUrl={person?.picture || person?.thumbnail_picture}
        />
      );
    })}

      </div>

      {/* Evidence Section */}
      <h2 className="text-xl font-semibold mt-10">Evidence</h2>
      <div className="grid gap-4 mt-2 sm:grid-cols-1 md:grid-cols-2">
        <EvidenceCard evidence={caseData.evidence || []} />
      </div>

      {/* Back Link */}
      <Link to="/cases" className="text-blue-600 underline mt-8 inline-block">
        ← Back to case list
      </Link>
    </div>
  );
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/pages/CasePage.jsx">
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "../api/axiosInstance";
import React from "react";

export default function CasePage() {
  const [cases, setCases] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    axios
      .get("cases/")
      .then((res) => setCases(res.data))
      .catch((err) => console.error("Error fetching cases:", err));
  }, []);

  const handleStartCase = async (caseId) => {
    try {
      const res = await axios.post(`/cases/${caseId}/start/`);
      console.log("Case started:", res.data);
      navigate(`/case/${caseId}`);
    } catch (err) {
      console.error("Failed to start case:", err);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Cold Case Files</h1>
      <div className="grid gap-4">
        {cases.map((c) => (
          <div
            key={c.id}
            className="block border rounded-lg p-4 hover:bg-gray-100 dark:hover:bg-gray-800 transition"
          >
            <h2 className="text-lg font-semibold">{c.title}</h2>
            <p className="text-sm text-gray-600 dark:text-gray-300">
              {c.summary}
            </p>
            <button
              className="mt-2 text-blue-600 underline"
              onClick={() => handleStartCase(c.id)}
            >
              Start Case
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="frontend/Hijacking_Cold_Cases/src/App.jsx">
import Navbar from './components/Navbar'
import {Routes, Route, Navigate} from 'react-router-dom'
import Signup from './pages/Signup'
import Login from './pages/Login'
import Profile from './pages/Profile'
import CasePage from './pages/CasePage'
import PrivateRoute from './components/PrivateRoute';
import React from 'react'
import CaseInvestigation from './pages/CaseInvestigation'
import LandingPage from './pages/LandingPage'
function App() {
  

  return (
    <>
    <Navbar />
    <Routes>
      <Route path="/" element={<Navigate to="/login" replace />}/>
      <Route path="/signup" element={<Signup />} />
      <Route path="/login" element={<Login />} />
      <Route path="/profile" element={<PrivateRoute><Profile /></PrivateRoute>} />
      <Route path="/cases" element={<CasePage />} />
      <Route path="/case/:id" element={<PrivateRoute><CaseInvestigation /></PrivateRoute>} />
      <Route path="/home" element={<PrivateRoute><LandingPage /></PrivateRoute>} />
    </Routes>
  </>
  )
}

export default App
</file>

<file path="backend/Hijacking_cold_cases/api/urls.py">
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .views import (
    RegisterView, ProfileView, CaseView, StartCaseView, CaseDetailView,
    GenerateCaseBatchView, GeneratePersonView, ActiveCaseView, PersonListView
)

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('profile/', ProfileView.as_view(), name='profile'),
    path('cases/', CaseView.as_view(), name='cases'),
    path('cases/<int:pk>/', CaseDetailView.as_view(), name='case_detail'),
    path('cases/<int:pk>/start/', StartCaseView.as_view(), name='start_case'),
    path('generate-case-batch/', GenerateCaseBatchView.as_view(), name='generate_case_batch'),
    path('generate-people/', GeneratePersonView.as_view(), name='generate_people'),
    path("people/", PersonListView.as_view()), 
    path('active-case/', ActiveCaseView.as_view(), name='active_case'),

    # JWT Token auth endpoints
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]
</file>

<file path="backend/Hijacking_cold_cases/Hijacking_cold_cases/settings.py">
"""
Django settings for Hijacking_cold_cases project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os 
RANDOM_USER_API_KEY= os.getenv("RANDOM_USER_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n2%kwva_tm+^q$sd$a4&qy&$^jf6#hn5rlfqmhuh51s6uf^1o0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Hijacking_cold_cases.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Hijacking_cold_cases.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'api.User'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

APPEND_SLASH = True


CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173", 
]

CORS_ALLOW_CREDENTIALS = True

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(weeks=1),
}
</file>

<file path="backend/Hijacking_cold_cases/api/models.py">
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.contrib.auth import get_user_model
from django.conf import settings
from django.db.models import JSONField

class User(AbstractUser):
    pass 

class Case(models.Model):
    DIFFICULTY_CHOICES = [
        ('easy','Easy'),
        ('medium', 'Medium'),
        ('hard', 'Hard'),
    ]

    STATUS_CHOICES =[
        ('open', 'Open'),
        ('solved', 'Solved'),
        ('cold', 'Cold'),

    ]
    title= models.CharField(max_length=255)
    summary=models.TextField()
    status= models.CharField(max_length=20, choices= STATUS_CHOICES, default='cold')
    difficulty = models.CharField(max_length=20, choices=DIFFICULTY_CHOICES, default='easy')
    created_at= models.DateTimeField(auto_now_add=True)
    killer = models.CharField(max_length=255, blank=True)
    justification= models.TextField(blank=True)
    alibis = models.JSONField(default= dict, blank=True)
    owner = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )
    crime_scene_description = models.TextField(blank=True, null=True)
    victim_name = models.CharField(max_length=255, blank=True, null=True)
    victim_occupation = models.CharField(max_length=255, blank=True, null=True)
    cause_of_death = models.CharField(max_length=255, blank=True, null=True)
    last_known_location = models.CharField(max_length=255, blank=True, null=True)
    background_story = models.TextField(blank=True, null=True)   
    

    def __str__(self):
        return self.title
    
class CaseInstance(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    case = models.ForeignKey('Case', on_delete=models.CASCADE)
    started_at = models.DateTimeField(auto_now_add=True)
    lives_remaining = models.IntegerField(default=3)
    status = models.CharField(max_length=20, default='active')  # active, failed, solved

    class Meta:
        unique_together = ('user', 'case')
    def __str__(self):
        return f"{self.user.username} - {self.case.title} ({self.status})"
    
class Clue(models.Model):
    case = models.ForeignKey("Case", on_delete=models.CASCADE, related_name='clues')
    order = models.IntegerField()
    text = models.TextField()
    is_red_herring = models.BooleanField(default=False)

    # This links each clue optionally to a Person (the suspect or source)
    character = models.ForeignKey(
        "Person", 
        null=True, 
        blank=True, 
        on_delete=models.SET_NULL, 
        related_name="clues"
    )

    def __str__(self):
        return f"Clue {self.order} for Case {self.case.title}"


class Person(models.Model):
    gender =models.CharField(max_length=15)
    first_name = models.CharField(max_length=255 )
    last_name = models.CharField(max_length=255)
    # full_name= first_name +  ' ' + last_name // make into property later
    location = models.CharField(max_length=255)
    email = models.EmailField()
    cell = models.CharField(max_length=30)
    picture = models.URLField()
    thumbnail_picture = models.URLField()
    nationality = models.CharField(max_length=10)

    def __str__(self):
        return f"{self.first_name} {self.last_name} - {self.location}"


# Create your models here.
</file>

<file path="backend/Hijacking_cold_cases/api/serializers.py">
from rest_framework import serializers
from .models import User, Case, CaseInstance, Clue , Person


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password']

    def create(self,validated_data):
        user = User.objects.create_user(
            username= validated_data['username'],
            email= validated_data['email'],
            password= validated_data['password']
        )
        return user
class PersonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Person
        fields = ['first_name', 'last_name', 'picture', 'thumbnail_picture']
        

class CaseInstanceSerializer(serializers.ModelSerializer):
    class Meta:
        model = CaseInstance
        fields = '__all__'
        read_only_fields = ['user', 'started_at', 'status']

class ClueSerializer(serializers.ModelSerializer):
   character = PersonSerializer()
   class Meta:
        model = Clue
        fields = ['id', 'text', 'order', 'character']

class PublicCaseSerializer(serializers.ModelSerializer):
    clues = ClueSerializer(many=True, read_only=True)
    alibis = serializers.SerializerMethodField()
    class Meta:
        model = Case
        fields = [
            'id', 'title', 'summary', 'difficulty', 'status',
            'victim_name', 'victim_occupation', 'cause_of_death',
            'last_known_location', 'background_story', 'crime_scene_description',
            'clues','alibis'
        ]
    def get_alibis(self, obj):
        return obj.alibis if obj.alibis else {}

class SolvedCaseSerializer(PublicCaseSerializer):
    class Meta(PublicCaseSerializer.Meta):
        fields = PublicCaseSerializer.Meta.fields + ['killer', 'justification']
</file>

<file path="backend/Hijacking_cold_cases/api/views.py">
import requests, random
from openai import OpenAI
from django.conf import settings
from django.shortcuts import render
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from .serializers import RegisterSerializer, CaseInstanceSerializer, PublicCaseSerializer, SolvedCaseSerializer, PersonSerializer
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly, IsAdminUser, AllowAny
from .models import Case, CaseInstance, Person, Clue
from dotenv import load_dotenv
from django.db.models import Case as DCase, When, Value, IntegerField
import os, re, json, textwrap

load_dotenv()
RANDOM_USER_API_KEY = os.getenv("RANDOM_USER_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

class RegisterView(APIView):
    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "User registered successfully"}, status=201)
        return Response(serializer.errors, status=400)

class ProfileView(APIView):
    def get(self, request):
        user = request.user
        return Response({
            "username": user.username,
            "email": user.email,
        })

CHARACTERS_PER_VIEW = {
    "easy": 3,
    "medium": 5,
    "hard": 7
}

class GenerateCaseBatchView(APIView):
    permission_classes = [IsAdminUser]

    def post(self, request):
        created_cases = []
        people_pool = list(Person.objects.all())

        for difficulty in ["easy", "medium", "hard"]:
            num_needed = CHARACTERS_PER_VIEW[difficulty]
            selected_people = random.sample(people_pool, num_needed)

            try:
                # Step 1: Generate victim and crime scene
                victim_payload = self.prompt_openai(self.build_victim_prompt())
                victim = victim_payload["victim"]
                crime_scene = victim_payload["crime_scene_description"]

                # Step 2: Generate characters and alibis
                character_prompt = self.build_character_prompt(victim, selected_people)
                characters = self.prompt_openai(character_prompt)

                # Step 3: Generate suspect-linked clues
                clues_prompt = self.build_clue_prompt(characters)
                clues = self.prompt_openai(clues_prompt)

                # Step 4: Generate general evidence
                evidence_prompt = self.build_evidence_prompt()
                evidence = self.prompt_openai(evidence_prompt)

                # Step 5: Pick a killer and justification
                killer, justification = self.select_killer_and_justify(characters)

                alibis = {char['name']: char['alibi'] for char in characters}

                case = Case.objects.create(
                    title=self.generate_title(),
                    summary=self.generate_summary(victim, crime_scene),
                    difficulty=difficulty,
                    status="unsolved",
                    owner=request.user,
                    killer=killer,
                    alibis=alibis,
                    justification=justification,
                    crime_scene_description=crime_scene,
                    victim_name=victim['name'],
                    victim_occupation=victim['occupation'],
                    cause_of_death=victim['cause_of_death'],
                    last_known_location=victim['last_known_location'],
                    background_story=victim['background_story']
                )

                # Save clues
                for idx, clue_data in enumerate(clues, start=1):
                    character_name = clue_data["character"]
                    person = next((p for p in selected_people if f"{p.first_name} {p.last_name}".lower() == character_name.lower()), None)
                    Clue.objects.create(
                        case=case,
                        order=idx,
                        text=clue_data["text"],
                        character=person,
                        is_red_herring=clue_data.get("is_red_herring", False)
                    )

                created_cases.append({"title": case.title})

            except Exception as e:
                print(traceback.format_exc())
                return Response({"error": str(e)}, status=500)

        return Response({"message": f"{len(created_cases)} cases created.", "cases": created_cases}, status=201)

    def prompt_openai(self, prompt):
        res = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        return json.loads(res.choices[0].message.content)

    def build_victim_prompt(self):
        return """
        Create a JSON with a compelling murder victim and a 1-paragraph crime scene.
        Return:
        {
          "victim": {
            "name": "...",
            "occupation": "...",
            "cause_of_death": "...",
            "last_known_location": "...",
            "background_story": "..."
          },
          "crime_scene_description": "..."
        }
        """

    def build_character_prompt(self, victim, people):
        names = [f"{p.first_name} {p.last_name}" for p in people]
        return f"""
        The victim was {victim['name']}. Generate suspects from:
        {', '.join(names)}
        For each, return name, occupation, and alibi as:
        {{ "name": "...", "occupation": "...", "alibi": {{ "where": "...", "what": "...", "witnesses": "..." }} }}
        Output as a JSON array.
        """

    def build_clue_prompt(self, characters):
        names = [char["name"] for char in characters]
        return f"""
        Generate clues for the suspects: {', '.join(names)}
        Each should include: "text", "character", "is_red_herring"
        Output as a JSON array.
        """

    def build_evidence_prompt(self):
        return """
        Return 2-3 pieces of general evidence as JSON array with "text" and "type".
        """

    def select_killer_and_justify(self, characters):
        killer = random.choice(characters)
        return killer["name"], f"{killer['name']} had a motive rooted in jealousy and acted out of desperation."

    def generate_title(self):
        return random.choice([
            "The Final Stroke", "A Palette of Lies", "Shadows on Canvas",
            "The Silent Sonata", "The Crimson Whisper"
        ])

    def generate_summary(self, victim, scene):
        return f"{victim['name']}, a {victim['occupation']}, was found dead. {scene} Can you uncover the truth?"

    # def parse_openai_response(self, text):
    #     lines = text.splitlines()
    #     result = {
    #         "title": "",
    #         "summary": "",
    #         "clues": {},
    #         "alibis": {},
    #         "motives": {},
    #         "killer": "",
    #         "justification": "",
    #         "characters": {}
    #     }

    #     section = None
    #     for line in lines:
    #         line = line.strip()

    #         if line.lower().startswith("title:"):
    #             result["title"] = line.split(":", 1)[1].strip()
    #             section = None
    #         elif line.lower().startswith("summary:"):
    #             result["summary"] = line.split(":", 1)[1].strip()
    #             section = None
    #         elif line.lower().startswith("clues:"):
    #             section = "clues"
    #         elif line.lower().startswith("alibis:"):
    #             section = "alibis"
    #         elif line.lower().startswith("motive:") or line.lower().startswith("motives:"):
    #             section = "motives"
    #         elif line.lower().startswith("killer:"):
    #             result["killer"] = line.split(":", 1)[1].strip()
    #             section = None
    #         elif line.lower().startswith("characters:"):
    #             section = "characters"


    #         elif section == "clues" and line.startswith("-") and ":" in line:
    #             try:
    #                 # Split on the first colon, and then dash
    #                 name, remainder = line.split(":", 1)
    #                 clue_text, clue_type = remainder.rsplit("-", 1) if "-" in remainder else (remainder, "Unknown")
    #                 result["clues"][name.strip()] = {
    #                 "text": clue_text.strip(),
    #                 "type": clue_type.strip()
    #                 }
    #             except:
    #                 pass
    #         elif section == "alibis" and ":" in line:
    #             name, alibi = line.split(":", 1)
    #             result["alibis"][name.strip().lstrip("- ").strip()] = alibi.strip()
    #         elif section == "motives" and ":" in line:
    #             name, motive = line.split(":", 1)
    #             result["motives"][name.strip()] = motive.strip()
    #         elif section == "characters" and line.startswith("-"):
    #             result["characters"].append(line[1:].strip())
    #         elif line.lower().startswith("justification:"):
    #             result["justification"] = line.split(":", 1)[1].strip()

    #     return result




class CaseView(APIView):
    permission_classes = [IsAuthenticatedOrReadOnly]
    def get(self, request):
        cases = Case.objects.annotate(
            difficulty_order=DCase(
                When(difficulty="easy", then=Value(1)),
                When(difficulty="medium", then=Value(2)),
                When(difficulty="hard", then=Value(3)),
                output_field=IntegerField()    
            )
        ).order_by('difficulty_order', '-created_at')
        serializer = PublicCaseSerializer(cases, many=True)
        return Response(serializer.data)


class ActiveCaseView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        instance = CaseInstance.objects.filter(user=request.user, status="active").first()
        if not instance:
            return Response({"active": False})
        
        return Response({
            "active": True,
            "case_id": instance.case.id,
            "case_title": instance.case.title,
            "lives_remaining": instance.lives_remaining
        })
    

class CaseDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, pk):
        case = Case.objects.get(pk=pk)
        instance = CaseInstance.objects.filter(user=request.user, case=case).first()

        if instance and instance.status == "solved":
            serializer = SolvedCaseSerializer(case)
        else:
            serializer = PublicCaseSerializer(case)

        return Response(serializer.data)   
    # NEXT BLOCK OF CODE, SHOULD BE REINTRODUCED AS AN ADMIN ABILITY TO CREATE NEW CASES 
    # def post(self,request):
    #     serializer = CaseSerializer(data=request.data)
    #     if serializer.is_valid():
    #         serializer.save(owner=request.user)
    #         return Response(serializer.data, status=201)
    #     return Response(serializer.errors, status=400)

class StartCaseView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request, pk):
        user = request.user
        try:
            case = Case.objects.get(pk=pk)
        except Case.DoesNotExist:
            return Response({'error': 'Case not found.'}, status=404)
        
        instance, created = CaseInstance.objects.get_or_create(user=user, case=case)

        if not created:
            return Response({'message': 'Case already started.', 'status': instance.status})
        
        serializer= CaseInstanceSerializer(instance)
        return Response(serializer.data, status=201)

# class CaseDetailView(APIView):
#     def get(self,request, pk):
#         case= Case.objects.get(pk=pk)
#         return Response(CaseSerializer(case).data)
    
class GeneratePersonView(APIView):
    def post(self, request): 
        count=100
        url = f"http://randomuser.me/api/?results={count}"
        response = requests.get(url)

        if response.status_code==200:
            data = response.json()
            for person_data in data['results']:
                gender=person_data['gender']
                first_name= person_data['name']['first']
                last_name= person_data['name']['last']
                location=f"{person_data['location']['city']},{person_data['location']['state']},{person_data['location']['country']}"
                email=person_data['email']
                cell =person_data['cell']
                picture = person_data['picture']['medium']
                thumbnail_picture= person_data['picture']['thumbnail']
                nationality = person_data['nat']

                Person.objects.create(
                    gender=gender,
                    first_name=first_name,
                    last_name=last_name,
                    location=location,
                    email=email,
                    cell=cell,
                    picture=picture,
                    thumbnail_picture=thumbnail_picture,
                    nationality=nationality
                )

            return Response({"message": f"{count} people generated and saved."}, status=status.HTTP_201_CREATED)
        else:
            return Response({"error": "Failed to fetch data from RandomUser API"}, status=status.HTTP_502_BAD_GATEWAY)


class PersonListView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        people = Person.objects.all()
        serializer = PersonSerializer(people, many=True)
        return Response(serializer.data)
# Create your views here.
</file>

</files>
